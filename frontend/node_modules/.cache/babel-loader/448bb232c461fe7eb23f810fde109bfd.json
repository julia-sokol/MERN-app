{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null); //no const [isPending, setIsPending] = useState(true);\n\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController(); //no setTimeout(() => {\n\n    console.log(\"URL: \", url);\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        // error coming back from server\n        throw Error('could not fetch the data for that resource');\n      }\n\n      return res.json();\n    }).then(data => {\n      //no    setIsPending(false);\n      setData(data);\n      setError(null);\n    }).catch(err => {\n      if (err.name === 'AbortError') {\n        console.log('fetch aborted');\n      } else {\n        // auto catches network / connection error\n        //no      setIsPending(false);\n        setError(err.message);\n      }\n    }); //no }, 1000);\n    // abort the fetch\n\n    return () => abortCont.abort();\n  }, [url]); //   return { data, isPending, error };\n\n  console.log(\"DATA: \", data);\n  return {\n    data,\n    error\n  };\n};\n\n_s(useFetch, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");\n\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","abortCont","AbortController","console","log","fetch","signal","then","res","ok","Error","json","catch","err","name","message","abort"],"sources":["C:/Users/Admin/Desktop/MERN-Stack-Tutorial/frontend/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  //no const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n\r\n    //no setTimeout(() => {\r\n        console.log(\"URL: \", url)\r\n      fetch(url, { signal: abortCont.signal })\r\n      .then(res => {\r\n        if (!res.ok) { // error coming back from server\r\n          throw Error('could not fetch the data for that resource');\r\n        } \r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n    //no    setIsPending(false);\r\n        setData(data);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        if (err.name === 'AbortError') {\r\n          console.log('fetch aborted')\r\n        } else {\r\n          // auto catches network / connection error\r\n    //no      setIsPending(false);\r\n          setError(err.message);\r\n        }\r\n      })\r\n    //no }, 1000);\r\n\r\n    // abort the fetch\r\n    return () => abortCont.abort();\r\n  }, [url])\r\n\r\n//   return { data, isPending, error };\r\n console.log(\"DATA: \", data)\r\n return { data, error };\r\n}\r\n \r\nexport default useFetch;"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EACxB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC,CADwB,CAExB;;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,IAAIC,eAAJ,EAAlB,CADc,CAGd;;IACIC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,GAArB;IACFS,KAAK,CAACT,GAAD,EAAM;MAAEU,MAAM,EAAEL,SAAS,CAACK;IAApB,CAAN,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;QAAE;QACb,MAAMC,KAAK,CAAC,4CAAD,CAAX;MACD;;MACD,OAAOF,GAAG,CAACG,IAAJ,EAAP;IACD,CAND,EAOCJ,IAPD,CAOMV,IAAI,IAAI;MAChB;MACIC,OAAO,CAACD,IAAD,CAAP;MACAG,QAAQ,CAAC,IAAD,CAAR;IACD,CAXD,EAYCY,KAZD,CAYOC,GAAG,IAAI;MACZ,IAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;QAC7BX,OAAO,CAACC,GAAR,CAAY,eAAZ;MACD,CAFD,MAEO;QACL;QACN;QACMJ,QAAQ,CAACa,GAAG,CAACE,OAAL,CAAR;MACD;IACF,CApBD,EALY,CA0Bd;IAEA;;IACA,OAAO,MAAMd,SAAS,CAACe,KAAV,EAAb;EACD,CA9BQ,EA8BN,CAACpB,GAAD,CA9BM,CAAT,CALwB,CAqC1B;;EACCO,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,IAAtB;EACA,OAAO;IAAEA,IAAF;IAAQE;EAAR,CAAP;AACA,CAxCD;;GAAMJ,Q;;AA0CN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}